// admin/ai/character.js
import { Markup } from "telegraf";
import { pool } from "../db.js";

async function replyOrEdit(ctx, text, extra = {}) {
  const opts = { parse_mode: "HTML", ...extra };
  if (ctx.updateType === "callback_query") {
    try { await ctx.editMessageText(text, opts); }
    catch { await ctx.reply(text, opts); }
    try { await ctx.answerCbQuery(); } catch {}
  } else {
    await ctx.reply(text, opts);
  }
}

async function getCurrentCharacter(tgId) {
  const [rows] = await pool.execute(
    `SELECT ai_character FROM users WHERE telegram_id = :id LIMIT 1`,
    { id: tgId }
  );
  return rows[0]?.ai_character || "polite";
}

async function setCharacter(tgId, mode) {
  await pool.execute(
    `UPDATE users SET ai_character = :m WHERE telegram_id = :id`,
    { m: mode, id: tgId }
  );
}

function kbCharacter(current) {
  const mark = (k, title) => `${current === k ? "‚úÖ " : ""}${title}`;
  return Markup.inlineKeyboard([
    [
      Markup.button.callback(mark("polite", "–í–µ–∂–ª–∏–≤—ã–π"), "char:polite"),
      Markup.button.callback(mark("funny",  "–í–µ—Å–µ–ª—å—á–∞–∫"), "char:funny"),
      Markup.button.callback(mark("rude",   "–ë—ã–¥–ª–æ"),     "char:rude"),
    ],
    [Markup.button.callback("‚óÄÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò", "menu_ai")],
    [Markup.button.callback("üè† –ì–ª. –º–µ–Ω—é", "open_main_menu")],
  ]);
}

function characterHelp(current) {
  const names = { polite: "–í–µ–∂–ª–∏–≤—ã–π", funny: "–í–µ—Å–µ–ª—å—á–∞–∫", rude: "–ë—ã–¥–ª–æ" };
  return (
`<b>–•–∞—Ä–∞–∫—Ç–µ—Ä –æ—Ç–≤–µ—Ç–æ–≤</b>

<b>–í–µ–∂–ª–∏–≤—ã–π</b> ‚Äî –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å —É–≤–∞–∂–µ–Ω–∏–µ–º.
<b>–í–µ—Å–µ–ª—å—á–∞–∫</b> ‚Äî —Å —é–º–æ—Ä–æ–º –∏ –ª—ë–≥–∫–∏–º–∏ –ø–æ–¥–∫–æ–ª–∞–º–∏; –º–∞—Ç –¥–æ–ø—É—Å—Ç–∏–º, –Ω–æ –±–µ–∑ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π.
<b>–ë—ã–¥–ª–æ</b> ‚Äî –≥—Ä—É–±–æ–≤–∞—Ç–æ, –ø—Ä–æ—Å—Ç–æ—Ä–µ—á–Ω–æ; –º–∞—Ç –¥–æ–ø—É—Å—Ç–∏–º, –Ω–æ –±–µ–∑ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π/—Ç—Ä–∞–≤–ª–∏.

–¢–µ–∫—É—â–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä: <b>${names[current] || "–í–µ–∂–ª–∏–≤—ã–π"}</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.`
  );
}

export async function viewAiCharacter(ctx) {
  const tgId = ctx.from?.id;
  const cur = await getCurrentCharacter(tgId);
  await replyOrEdit(ctx, characterHelp(cur), kbCharacter(cur));
}

export function registerAiCharacterHandlers(bot) {
  bot.action("ai_character", viewAiCharacter);
  bot.action(/char:(polite|funny|rude)/, async (ctx) => {
    const tgId = ctx.from?.id;
    const mode = ctx.match[1];
    await setCharacter(tgId, mode);
    const cur = await getCurrentCharacter(tgId);
    await replyOrEdit(ctx, characterHelp(cur), kbCharacter(cur));
  });
}

export default { viewAiCharacter, registerAiCharacterHandlers };
