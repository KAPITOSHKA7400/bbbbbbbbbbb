// admin/telegram.js
import "dotenv/config";
import { Telegraf, Markup } from "telegraf";
import {
  assertDb,
  ensureSchema,
  ensureTelegramUser,
  getUserByTelegramId,
  setUserVkvl,
  clearUserVkvl,
  setAiModeAll,
  toggleAiModeRandom,
  toggleAiModeMention,
  setUserPrompt,
  setUserNegativePrompt,
} from "./db.js";
import { vkvlInstruction } from "./integrations/vkvl.js";
import { viewAiPrompt } from "./ai/prompt.js";
import { viewAiNegativePrompt } from "./ai/negative_prompt.js";
import { viewAiCharacter, registerAiCharacterHandlers } from "./ai/character.js";
import { spawn } from "child_process";
import { fileURLToPath } from "url";
import { dirname, resolve } from "path";

const { TELEGRAM_BOT_TOKEN } = process.env;
if (!TELEGRAM_BOT_TOKEN) {
  console.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env");
  process.exit(1);
}

/* -------------------- –∑–∞–ø—É—Å–∫ VKVL –∫–∞–∫ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ -------------------- */
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const vkBotPath = resolve(__dirname, "../VKVL/index.js");

const vkProc = spawn(process.execPath, [vkBotPath], { stdio: "inherit" });
vkProc.on("spawn", () => console.log("üöÄ VK Play Live –±–æ—Ç –∑–∞–ø—É—â–µ–Ω (VKVL/index.js)"));
vkProc.on("exit", (code, signal) =>
  console.log(`‚ö†Ô∏è VK –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è. code=${code} signal=${signal || "none"}`)
);
vkProc.on("error", (err) => console.error("‚ùå VK –±–æ—Ç –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª:", err));

/* --------------------------------- Telegram -------------------------------- */
const bot = new Telegraf(TELEGRAM_BOT_TOKEN);

// –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥
const awaitingVkvlSlug = new Set();
const awaitingPrompt = new Set();
const awaitingNegativePrompt = new Set();

/* –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã */
const kbWelcome = () =>
  Markup.inlineKeyboard([Markup.button.callback("üìã –ú–µ–Ω—é", "open_main_menu")]);

const kbMain = () =>
  Markup.inlineKeyboard([
    [Markup.button.callback("üë§ –ü—Ä–æ—Ñ–∏–ª—å", "menu_profile")],
    [Markup.button.callback("üß© –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏", "menu_integrations")],
    [Markup.button.callback("üß† –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò", "menu_ai")],
  ]);

const kbBackToMain = () =>
  Markup.inlineKeyboard([[Markup.button.callback("‚¨ÖÔ∏è –ì–ª. –º–µ–Ω—é", "open_main_menu")]]);

const kbIntegrations = (vkvlConnected = false) =>
  Markup.inlineKeyboard([
    [
      vkvlConnected
        ? Markup.button.callback("VK VL ‚ùå", "integr_vkvl_remove")
        : Markup.button.callback("VK VL", "integr_vkvl"),
      Markup.button.callback("Twitch", "integr_twitch"),
      Markup.button.callback("YouTube", "integr_youtube"),
    ],
    [Markup.button.callback("‚¨ÖÔ∏è –ì–ª. –º–µ–Ω—é", "open_main_menu")],
  ]);

const kbBackToIntegrations = () =>
  Markup.inlineKeyboard([[Markup.button.callback("‚¨ÖÔ∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏", "menu_integrations")]]);

/* ‚Äî‚Äî‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò ‚Äî‚Äî‚Äî */
const kbAiMenu = () =>
  Markup.inlineKeyboard([
    [Markup.button.callback("üé≠ –•–∞—Ä–∞–∫—Ç–µ—Ä", "ai_character")],
    [Markup.button.callback("üí¨ –†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤", "ai_mode_open")],
    [Markup.button.callback("üìù –ü—Ä–æ–º–ø—Ç", "ai_prompt")],
    [Markup.button.callback("üö´ –ù–µ–≥–∞—Ç–∏–≤ –ø—Ä–æ–º–ø—Ç", "ai_negative_prompt")],
    [Markup.button.callback("‚¨ÖÔ∏è –ì–ª. –º–µ–Ω—é", "open_main_menu")],
  ]);

const kbAiModes = (m) => {
  const c1 = m.ai_all ? "‚òëÔ∏è" : "‚¨úÔ∏è";
  const c2 = m.ai_random ? "‚òëÔ∏è" : "‚¨úÔ∏è";
  const c3 = m.ai_mention ? "‚òëÔ∏è" : "‚¨úÔ∏è";
  return Markup.inlineKeyboard([
    [Markup.button.callback(`${c1} 1) –ù–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è`, "ai_mode_all")],
    [Markup.button.callback(`${c2} 2) –í—ã–±–æ—Ä–æ—á–Ω–æ`, "ai_mode_random_toggle")],
    [Markup.button.callback(`${c3} 3) –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ`, "ai_mode_mention_toggle")],
    [Markup.button.callback("‚¨ÖÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò", "menu_ai")],
    [Markup.button.callback("‚¨ÖÔ∏è –ì–ª. –º–µ–Ω—é", "open_main_menu")],
  ]);
};

/* –£—Ç–∏–ª–∏—Ç–∞ –æ—Ç–≤–µ—Ç–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */
async function replyOrEdit(ctx, text, keyboard) {
  try {
    if (ctx.updateType === "callback_query") {
      await ctx.editMessageText(text, { parse_mode: "HTML", ...keyboard });
      try { await ctx.answerCbQuery(); } catch {}
    } else {
      await ctx.reply(text, { parse_mode: "HTML", ...keyboard });
    }
  } catch {
    await ctx.reply(text, { parse_mode: "HTML", ...keyboard });
    if (ctx.updateType === "callback_query") try { await ctx.answerCbQuery(); } catch {}
  }
}
function integrationsStatusLine(vkvlConnected) {
  return `VKVL - ${vkvlConnected ? "–ü–æ–¥–∫–ª—é—á—ë–Ω." : "–Ω–µ—Ç."} / Twitch - –Ω–µ—Ç. / YouTube - –Ω–µ—Ç.`;
}

/* /start ‚Äî –ø—Ä–∏–≤–µ—Ç (—Ñ–æ—Ç–æ), —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è id+username */
bot.start(async (ctx) => {
  try {
    await assertDb();
    await ensureSchema();
    const tgId = ctx.from?.id;
    const username = ctx.from?.username || null;
    if (tgId) await ensureTelegramUser(tgId, username);
  } catch (e) {
    console.warn("‚ö†Ô∏è DB init/register error:", e?.message || e);
  }

  const imgPath = resolve(__dirname, "img", "9de06974-04a0-4e98-bf32-9da0f650166e.png");
  const caption = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ <b>–ú–µ–Ω—é</b>, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.";
  await ctx.replyWithPhoto({ source: imgPath }, { caption, parse_mode: "HTML", ...kbWelcome() });
});

/* –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é */
bot.action("open_main_menu", async (ctx) => {
  const tgId = ctx.from?.id;
  const username = ctx.from?.username || null;
  if (tgId) { try { await ensureTelegramUser(tgId, username); } catch {} }
  const text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:";
  await replyOrEdit(ctx, text, kbMain());
});

/* ---------- –ü—Ä–æ—Ñ–∏–ª—å ---------- */
bot.action("menu_profile", async (ctx) => {
  const text = "üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n–ó–∞–≥–ª—É—à–∫–∞. –ó–¥–µ—Å—å –ø–æ–∑–∂–µ –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ.";
  await replyOrEdit(ctx, text, kbBackToMain());
});

/* ---------- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ---------- */
bot.action("menu_integrations", async (ctx) => {
  const tgId = ctx.from?.id;
  const user = tgId ? await getUserByTelegramId(tgId) : null;
  const connected = !!(user && user.vkvl === 1 && user.vkvl_page);
  const text =
    `üß© <b>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</b>\n` +
    integrationsStatusLine(connected) +
    `\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:`;
  await replyOrEdit(ctx, text, kbIntegrations(connected));
});
bot.action("integr_vkvl", async (ctx) => {
  const tgId = ctx.from?.id;
  if (tgId) awaitingVkvlSlug.add(tgId);
  const text = await vkvlInstruction();
  await replyOrEdit(ctx, text, kbBackToIntegrations());
});
bot.action("integr_vkvl_remove", async (ctx) => {
  const tgId = ctx.from?.id;
  if (!tgId) return;
  awaitingVkvlSlug.delete(tgId);
  await clearUserVkvl(tgId);
  await replyOrEdit(ctx, "‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è VKVL —É–¥–∞–ª–µ–Ω–∞.", kbBackToIntegrations());
});
bot.action("integr_twitch", async (ctx) => {
  await replyOrEdit(ctx, "üü£ <b>Twitch</b>\n–ó–∞–≥–ª—É—à–∫–∞. –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", kbBackToIntegrations());
});
bot.action("integr_youtube", async (ctx) => {
  await replyOrEdit(ctx, "üî¥ <b>YouTube</b>\n–ó–∞–≥–ª—É—à–∫–∞. –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", kbBackToIntegrations());
});

/* ---------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò ---------- */
bot.action("menu_ai", async (ctx) => {
  const text = "üß† <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:";
  await replyOrEdit(ctx, text, kbAiMenu());
});

/* ‚Äî –•–∞—Ä–∞–∫—Ç–µ—Ä */
bot.action("ai_character", viewAiCharacter);
registerAiCharacterHandlers(bot);

/* ‚Äî –†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤ */
bot.action("ai_mode_open", async (ctx) => {
  const tgId = ctx.from?.id;
  const user = tgId ? await getUserByTelegramId(tgId) : { ai_all: 1, ai_random: 0, ai_mention: 0 };
  const text = [
    "üß† <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò ‚Üí –†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤</b>",
    "",
    "‚Ä¢ 1) <b>–ù–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b> ‚Äî –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
    "‚Ä¢ 2) <b>–í—ã–±–æ—Ä–æ—á–Ω–æ</b> ‚Äî –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
    "‚Ä¢ 3) <b>–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b> ‚Äî –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ç–æ—á–Ω–æ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ ¬´–Ω–µ–π—Ä–æ–±–æ—Ç¬ª.",
    "",
    "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç(—ã):",
  ].join("\n");
  await replyOrEdit(ctx, text, kbAiModes(user));
});
bot.action("ai_mode_all", async (ctx) => {
  const tgId = ctx.from?.id;
  if (!tgId) return;
  await setAiModeAll(tgId);
  const user = await getUserByTelegramId(tgId);
  await replyOrEdit(ctx, "‚úÖ –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º: <b>–ù–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n(2 –∏ 3 –≤—ã–∫–ª—é—á–µ–Ω—ã)", kbAiModes(user));
});
bot.action("ai_mode_random_toggle", async (ctx) => {
  const tgId = ctx.from?.id;
  if (!tgId) return;
  await toggleAiModeRandom(tgId);
  const user = await getUserByTelegramId(tgId);
  await replyOrEdit(ctx, "üìù –†–µ–∂–∏–º <b>–í—ã–±–æ—Ä–æ—á–Ω–æ</b> –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω.\n(1 –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è)", kbAiModes(user));
});
bot.action("ai_mode_mention_toggle", async (ctx) => {
  const tgId = ctx.from?.id;
  if (!tgId) return;
  await toggleAiModeMention(tgId);
  const user = await getUserByTelegramId(tgId);
  await replyOrEdit(ctx, "üìù –†–µ–∂–∏–º <b>–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b> –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω.\n(1 –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è)", kbAiModes(user));
});

/* ‚Äî –ü—Ä–æ–º–ø—Ç */
bot.action("ai_prompt", async (ctx) => {
  const tgId = ctx.from?.id;
  const user = tgId ? await getUserByTelegramId(tgId) : null;
  if (tgId) {
    awaitingPrompt.add(tgId);
    awaitingNegativePrompt.delete(tgId);
    awaitingVkvlSlug.delete(tgId);
  }
  const text = await viewAiPrompt(user?.prompt || null);
  await replyOrEdit(ctx, text, Markup.inlineKeyboard([
    [Markup.button.callback("‚¨ÖÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò", "menu_ai")],
    [Markup.button.callback("‚¨ÖÔ∏è –ì–ª. –º–µ–Ω—é", "open_main_menu")],
  ]));
});

/* ‚Äî –ù–µ–≥–∞—Ç–∏–≤ –ø—Ä–æ–º–ø—Ç */
bot.action("ai_negative_prompt", async (ctx) => {
  const tgId = ctx.from?.id;
  const user = tgId ? await getUserByTelegramId(tgId) : null;
  if (tgId) {
    awaitingNegativePrompt.add(tgId);
    awaitingPrompt.delete(tgId);
    awaitingVkvlSlug.delete(tgId);
  }
  const text = await viewAiNegativePrompt(user?.negative_prompt || null);
  await replyOrEdit(ctx, text, Markup.inlineKeyboard([
    [Markup.button.callback("‚¨ÖÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò", "menu_ai")],
    [Markup.button.callback("‚¨ÖÔ∏è –ì–ª. –º–µ–Ω—é", "open_main_menu")],
  ]));
});

/* ---------- –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ ---------- */
bot.on("text", async (ctx) => {
  const tgId = ctx.from?.id;
  if (!tgId) return;
  const text = (ctx.message?.text || "").trim();

  // 1) VKVL slug
  if (awaitingVkvlSlug.has(tgId)) {
    const slug = extractVkvlSlug(text);
    if (!slug || slug.length < 3 || slug.length > 64) {
      await ctx.reply("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL/—Å–ª–∞–≥. –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–æ–ª—å–∫–æ –∫–æ–Ω–µ—á–Ω—ã–π —Å–ª–∞–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: <b>crazzy0rabbit</b>).", { parse_mode: "HTML" });
      return;
    }
    await setUserVkvl(tgId, true, slug);
    awaitingVkvlSlug.delete(tgId);
    await ctx.reply("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è VKVL –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–∞!", { parse_mode: "HTML" });
    return;
  }

  // 2) PROMPT
  if (awaitingPrompt.has(tgId)) {
    const normalized = normalizeCsv(text);
    await setUserPrompt(tgId, normalized);
    awaitingPrompt.delete(tgId);
    await ctx.reply("‚úÖ –ü—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", { parse_mode: "HTML" });
    return;
  }

  // 3) NEGATIVE PROMPT
  if (awaitingNegativePrompt.has(tgId)) {
    const normalized = normalizeCsv(text);
    await setUserNegativePrompt(tgId, normalized);
    awaitingNegativePrompt.delete(tgId);
    await ctx.reply("‚úÖ –ù–µ–≥–∞—Ç–∏–≤ –ø—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", { parse_mode: "HTML" });
    return;
  }
});

/* –ó–∞–ø—É—Å–∫ TG-–±–æ—Ç–∞ */
bot.launch().then(() => console.log("‚úÖ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω"));

process.once("SIGINT", () => {
  bot.stop("SIGINT");
  if (!vkProc.killed) vkProc.kill("SIGINT");
});
process.once("SIGTERM", () => {
  bot.stop("SIGTERM");
  if (!vkProc.killed) vkProc.kill("SIGTERM");
});

/* ---------- helpers ---------- */
function extractVkvlSlug(input) {
  let s = String(input || "").trim();
  try {
    if (/^https?:\/\//i.test(s)) {
      const u = new URL(s);
      const parts = u.pathname.split("/").filter(Boolean);
      if (parts.length) s = parts.pop();
    }
  } catch {}
  s = s.replace(/^@/, "");
  s = s.replace(/[^a-zA-Z0-9_-]/g, "");
  return s.toLowerCase();
}
function normalizeCsv(text) {
  return String(text || "")
    .split(",")
    .map(x => x.trim())
    .filter(x => x.length > 0)
    .join(", ");
}
