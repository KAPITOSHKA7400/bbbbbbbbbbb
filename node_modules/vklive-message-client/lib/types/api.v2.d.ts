export declare namespace VkWsTypes {
    type WebSocketSubscriptionTokensResponse = {
        data: {
            tokens: {
                token: string;
                channel: string;
            }[];
        };
    };
    type Method<T extends Record<string, unknown>> = {
        id: number;
    } & T;
    type SubscribeMethod = {
        subscribe: {
            channel: string;
            token?: string;
        };
    };
    type UnsubscribeMethod = {
        unsubscribe: {
            channel: string;
        };
    };
    type ConnectMethod = {
        connect: {
            token: string;
            name: "js" | string;
        };
    };
    type Badge = {
        achievement: {
            name: string;
            type: string;
        };
        id: string;
        isCreated: boolean;
        largeUrl: string;
        mediumUrl: string;
        smallUrl: string;
        name: string;
    };
    type Role = {
        id: string;
        name: string;
        smallUrl: string;
        largeUrl: string;
        mediumUrl: string;
        priority: number;
    };
    type Author = {} & ChatUser;
    type ProfileLink = {
        type: string;
        link: string;
    };
    type User = {
        id: number;
        nickColor: number;
        displayName: string;
        hasAvatar: boolean;
        avatarUrl: string;
        isVerifiedStreamer: boolean;
        nick: string;
        profileLinks: ProfileLink[];
        vkplayProfileLink: string;
        name: string;
    };
    type ChatUser = {
        badges: Badge[];
        roles: Role[];
        createdAt: number;
        isOwner: boolean;
        isChatModerator: boolean;
        isChannelModerator: boolean;
    } & User;
    type ParentMessage = {
        isPrivate: boolean;
        data: ChatMessageBlock[];
        createdAt: number;
        author: Author;
        id: number;
    };
    type MessageBlockText = {
        content: string;
        modificator: string;
        type: "text" | string;
    };
    type MessageBlockMention = {
        displayName?: string;
        name?: string;
        nick?: string;
        id: number;
        type: "mention";
    };
    type MessageBlockLink = {
        content: string;
        explicit: boolean;
        type: "link";
        url: string;
    };
    type ContentParsed = [string, "unstyled" | string, []];
    type Smile = {
        smallUrl?: string;
        mediumUrl?: string;
        largeUrl?: string;
        isAnimated?: boolean;
        id: string;
        name: string;
    };
    type MessageBlockSmile = {
        type: "smile";
    } & Smile;
    type ChatMessageBlock = MessageBlockText | MessageBlockSmile | MessageBlockMention | MessageBlockLink;
    type MessageFlags = {
        isFirstMessage: boolean;
        isParentDeleted: boolean;
    };
    type MessageData = {
        author: Author;
        createdAt: number;
        data: ChatMessageBlock[];
        id: number;
        styles: unknown[];
        user: ChatUser;
        isPrivate: boolean;
        parent?: ParentMessage;
        threadId: string | null;
        flags: MessageFlags;
    };
    type ChatMessage = {
        data: MessageData;
        type: "message";
    };
    type Reward = {
        name: string;
        price: number;
        isAutoapproved: boolean;
        bgcolor: number;
        isDisabled: boolean;
        description: string;
        isTextRequired: boolean;
        id: string;
        largeUrl: string;
        mediumUrl: string;
        smallUrl: string;
        isCreated: boolean;
        isHiddenText: boolean;
        isUnlimited: boolean;
    };
    type ActionsJournalNewEvent<T> = {
        data: T;
        type: "actions_journal_new_event";
    };
    type ActionsJournalRewardDemandMessage = {
        action_time: number;
        type: "reward_demand" | string;
        reward_demand: {
            status: string;
            user: User;
            activationMessage: ChatMessageBlock[];
            demandId: number;
            reward: Reward;
            createdAt: number;
        };
    };
    type ActionsJournalFollower = {
        follower: User;
        action_time: number;
        type: "following";
    };
    type RewardStatus = "approved" | "pending" | "rejected";
    type CpRewardDemandMessage = {
        data: {
            createdAt: number;
            reward: Reward;
            demandId: number;
            activationMessage: ChatMessageBlock[];
            user: User;
            status: RewardStatus;
        };
        type: "cp_reward_demand";
    };
    type StreamStatus = {
        videoId: number;
        type: "stream_end" | "stream_start";
    };
    type ChannelInfo = {
        type: "stream_online_status";
        blogUrl: string;
        title: string;
        category: {
            title: string;
        };
        isOnline: boolean;
        viewers: number;
        streamId: string;
    };
    type StreamLikeCounter = {
        counter: number;
        userId: number;
        type: "stream_like_counter";
    };
    type WsMessageBody = ChatMessage | ActionsJournalNewEvent<ActionsJournalRewardDemandMessage> | ActionsJournalNewEvent<ActionsJournalFollower> | CpRewardDemandMessage | StreamStatus | ChannelInfo | StreamLikeCounter;
    type WsMessage<T extends WsMessageBody = WsMessageBody> = {
        push: {
            channel: string;
            pub: {
                data: T;
                offset: number;
            };
        };
    };
    type WsMethodResponse<T extends Record<string, unknown>> = {
        id: number;
    } & T;
}
//# sourceMappingURL=api.v2.d.ts.map