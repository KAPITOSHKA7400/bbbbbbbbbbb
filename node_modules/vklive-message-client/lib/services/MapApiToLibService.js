import { VkplMessageParser } from "./VkplMessageParser.js";
export class MapApiToClient {
    static channelFromBlogResponse(blog) {
        const publicWebSocketChannel = blog.publicWebSocketChannel.split(":")[1];
        if (!publicWebSocketChannel) {
            throw new TypeError("Invalid publicWebSocketChannel");
        }
        return {
            blogUrl: blog.blogUrl,
            id: blog.owner.id,
            name: blog.owner.name,
            publicWebSocketChannel,
        };
    }
    static parentMessageFromApi(message) {
        return {
            id: message.id,
            isPrivate: message.isPrivate,
            user: message.author,
            message: VkplMessageParser.deserialize(message.data),
        };
    }
    static rewardMessageFromApi(message, channel) {
        return {
            channel,
            user: message.data.user,
            reward: {
                status: message.data.status,
                ...message.data.reward,
                message: message.data.activationMessage.length > 0
                    ? VkplMessageParser.deserialize(message.data.activationMessage)
                    : undefined,
            },
        };
    }
    static chatMessageFromApi(message, channel) {
        const author = message.data.author;
        const parentMessage = message.data.parent
            ? MapApiToClient.parentMessageFromApi(message.data.parent)
            : undefined;
        return {
            channel,
            user: author,
            createdAt: message.data.createdAt,
            id: message.data.id,
            isPrivate: message.data.isPrivate,
            message: VkplMessageParser.deserialize(message.data.data),
            parent: parentMessage,
            flags: message.data.flags,
            threadId: message.data.threadId,
        };
    }
}
