import { EventEmitter } from "eventemitter3";
import WebSocket from "ws";
import { VkWsTypes } from "../types/api.v2.js";
import { VKPLClientInternal } from "../types/internal.js";
import { VkplApi } from "./VkplApi.js";
type CentrifugeClientEventMap = {
    message: [message: VkWsTypes.WsMessage];
    reconnect: [];
};
export declare class CentrifugeClient<T extends string> extends EventEmitter<CentrifugeClientEventMap> {
    private wsServerUrl;
    private api;
    private socket?;
    private currentMethodId;
    private methods;
    constructor(wsServerUrl: string, api: VkplApi<T>);
    connect(): Promise<void>;
    disconnect(): void;
    onOpen(_: WebSocket.Event): Promise<void>;
    private resolveMethod;
    invokeMethod<T extends Record<string, unknown>, R = unknown>(payload: VkWsTypes.Method<T>): Promise<R>;
    connectToChat(channel: VKPLClientInternal.Channel): Promise<unknown>;
    connectToReedem(channel: VKPLClientInternal.Channel, wsSubscribeToken: string): Promise<unknown>;
    connectToChannelInfo(channel: VKPLClientInternal.Channel): Promise<unknown>;
    onMessage(event: WebSocket.MessageEvent): void;
    private isWsMethod;
    private isWsMessage;
    onClose(event: WebSocket.CloseEvent): Promise<void>;
    onError(error: WebSocket.ErrorEvent): void;
}
export {};
//# sourceMappingURL=CentrifugeClient.d.ts.map