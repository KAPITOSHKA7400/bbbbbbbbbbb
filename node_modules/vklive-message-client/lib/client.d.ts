import { EventEmitter } from "eventemitter3";
import { VkplApi } from "./services/VkplApi.js";
import { VkplMessageParser } from "./services/VkplMessageParser.js";
import { APITypes } from "./types/api.js";
import { VKPLClientInternal } from "./types/internal.js";
type VKPLMessageClientEventMap<Channel extends string> = {
    /**
     * Событие о новом сообщении в каналах трансляции
     */
    message: VKPLClientInternal.MessageEvent<Channel>;
    /**
     * Событие о получение награды за баллы канала
     */
    reward: VKPLClientInternal.RewardEvent<Channel>;
    /**
     * Событие о получении информации о канале таких как название, категория, зрители и т.д.
     */
    "channel-info": VKPLClientInternal.ChannelInfoEvent<Channel>;
    /**
     * Событие о получении статуса канала. Если начался трансляция или остановилась
     */
    "stream-status": VKPLClientInternal.StreamStatusEvent<Channel>;
    /**
     * Событие о получении нового токена. Понадобится для сохранения нового токена, и восстановления работы бота без надобности идти на сайт
     */
    "refresh-token": VKPLClientInternal.RefreshTokenEvent<Channel>;
    /**
     * Событие о изменении количества лайков канала
     */
    "stream-like-counter": VKPLClientInternal.StreamLikeCounterEvent<Channel>;
    follower: VKPLClientInternal.FollowerEvent<Channel>;
};
/**
 * @property {string} channels - Список каналов
 * @property {Map} availableSmiles - Список доступных смайлов для акаунта бота
 *
 * Клиента для чата VKPlay Live. Позволяет получать и отправлять сообщения в чат трансляции.
 * Поддерживает несколько каналов, отправку сообщений по каждому из них, добавление упоминаний пользователей, отправку в ветку сообщений.
 *
 * @example
 * const login: string = process.env.VKPL_LOGIN ??;
 * const password: string = process.env.VKPL_PASSWORD;
 * const target: string = process.env.VKPL_TARGET;
 *
 * const client = new VKPLMessageClient({ auth: { login, password }, channels: [target], debugLog: true });
 * await client.connect();
 * await client.sendMessage(target, "Connected to chat!");
 *
 * client.on("message", async (ctx) =>{
 *     if (ctx.message.text.startsWith("!command"))
 *           await ctx.replyToThread("Hello World");
 * });
 */
declare class VKPLMessageClient<T extends string> extends EventEmitter<VKPLMessageClientEventMap<T>> {
    private config;
    private wsServerUrl;
    private auth?;
    private credentials?;
    /**
     * @property debugLog - Если true, то будет выводить логи вебсокета и API в консоль
     */
    static debugLog: boolean;
    static log: boolean;
    private centrifugeClient;
    messageParser: VkplMessageParser;
    private channelNames;
    /**
     * @property channels - Список каналов
     */
    channels: VKPLClientInternal.Channel[];
    /**
     * @availableSmiles - Список доступных смайлов для акаунта бота
     */
    availableSmiles: Map<string, string>;
    api: VkplApi<T>;
    constructor(config: VKPLClientInternal.Config<T>);
    private onRefreshToken;
    private isChatMessage;
    private isRewardMessage;
    private isStreamStatusMessage;
    private isChannelInfoMessage;
    private isStreamLikeCounterMessage;
    private isFollower;
    private onCentrifugoMessage;
    private onMessage;
    private onReward;
    private onChannelInfo;
    private onStreamStatus;
    private onStreamLikeCounter;
    private onFollower;
    private onReconnect;
    /**
     * @param id - Идентификатор
     *
     * Возвращает данные канала c API по имени.
     * Поск происходит по каналам, указанным в конфиге
     */
    findChannelById(id: string): VKPLClientInternal.Channel | undefined;
    /**
     * @param name - Имя канала
     *
     * Возвращает данные канала c API по имени.
     * Поиск происходит по каналам, указанным в конфиге
     */
    findChannelByName(name: string): VKPLClientInternal.Channel | undefined;
    private connectToChats;
    private obtainToken;
    private isAuthReadOnly;
    /**
     * Подключает бота к каналам, которые были переданы в конфиг
     * Необходимо вызвать этот метод, если вы хотите, чтобы бот получал сообщения
     */
    connect(): Promise<void>;
    disconnect(): void;
    private populateMessageParserWithSmiles;
    /**
     * @param message - Сообщение
     * @param channel - Канал
     * @param mentionUserId - ID пользователей, которые должны быть упомянуты в сообщении
     * @param threadId - ID сообщения, если нужно ответить в конкретной ветке
     * @return {Promise<APITypes.TMessageResponse>} Ответ API на сообщение
     *
     * Позволяет отправлять сообщение в чат трансляции без подключения к чату. Нужно лишь указать канал, куда будет отправлено сообщение
     *
     * @deprecated Используйте `client.api.sendMessage` вместо `client.sendMessage`
     */
    sendMessage(message: string, channel: T, mentionUserId?: number[], threadId?: number): Promise<APITypes.TMessageResponse>;
}
export default VKPLMessageClient;
//# sourceMappingURL=client.d.ts.map