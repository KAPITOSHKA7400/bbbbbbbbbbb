// VKVL/index.js
import "dotenv/config";
import VKPLMessageClient from "vklive-message-client";
import axios from "axios";
import {
  assertDb,
  ensureSchema,
  getVkvlToken,
  upsertVkvlToken,
  logChatMessage,
  getAllVkvlPages,
  getAiModeForVkvlPage,
  getPromptsForVkvlPage,
  appendHistory,
  getRecentHistory,
} from "../admin/db.js";
import { generateAIResponse } from "../ai/index.js";

/* ==================== helpers ==================== */
function pickRawChannel(ctx) {
  return (
    ctx?.blog?.blogUrl ??
    ctx?.blogUrl ??
    ctx?.channel?.blogUrl ??
    ctx?.channel ??
    ctx?.chat ??
    ctx?.room ??
    null
  );
}
function normalizeChannel(raw, fallback) {
  let s = "";
  if (typeof raw === "string") s = raw;
  else if (raw && typeof raw === "object") {
    s = raw.blogUrl || raw.url || raw.slug || raw.name || raw.id || "";
  }
  s = String(s)
    .replace(/^https?:\/\/(?:live\.)?vkplay\.ru\//i, "")
    .replace(/^https?:\/\/(?:live\.)?vkvideo\.ru\//i, "")
    .replace(/^[@/]+/, "")
    .trim();
  if (!s) s = fallback;
  return s.toLowerCase();
}
function getSafeIds(ctx) {
  const userId =
    ctx?.user?.id ??
    ctx?.user?.userId ??
    ctx?.user?.uid ??
    ctx?.user?.login ??
    ctx?.user?.nick ??
    "unknown";
  const msgId =
    ctx?.message?.id ??
    ctx?.message?.messageId ??
    ctx?.message?.msgId ??
    `${Date.now()}-${userId}`;
  return { userId: String(userId), msgId: String(msgId) };
}
function stripGreetings(s) {
  if (!s) return s;
  const greet = [
    "–ø—Ä–∏–≤–µ—Ç","–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ","–∑–¥—Ä–∞—Å—Ç–µ","–∫—É","—Ö–∞–π","–¥–∞—Ä–æ–≤–∞",
    "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å","–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä","–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ",
    "hello","hi","hey"
  ].join("|");
  const re = new RegExp(`^\\s*(?:${greet})[,!\\s-]*`, "i");
  return s.replace(re, "").trim();
}
function addressUser(reply, username) {
  if (!reply) return reply;
  if (!username || username === "unknown") return reply;
  return `${username}, ${reply}`;
}

/* --- —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Ç–æ–ª—å–∫–æ ¬´–Ω–µ–π—Ä–æ–±–æ—Ç¬ª / ¬´@–Ω–µ–π—Ä–æ–±–æ—Ç¬ª --- */
const MENTION_RE = /(^|[^\p{L}\p{N}_])@?–Ω–µ–π—Ä–æ–±–æ—Ç(?![\p{L}\p{N}_])/iu;
function isMentioned(text) { return MENTION_RE.test(String(text || "")); }

/* --- —Ñ–∏–ª—å—Ç—Ä: —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∏–∑ —ç–º–æ–¥–∑–∏ --- */
const EMOJI_OR_JOINER_RE = /[\p{Extended_Pictographic}\u200D\uFE0F]/gu;
function isEmojiOnly(input) {
  const t = String(input || "").trim();
  if (!t) return false;
  if (!/[\p{Extended_Pictographic}]/u.test(t)) return false;
  const rest = t
    .replace(EMOJI_OR_JOINER_RE, "")
    .replace(/[\s\p{P}\p{S}]/gu, "")
    .replace(/[A-Za-z–ê-–Ø–∞-—è–Å—ë0-9]/gu, "");
  return rest.length === 0;
}

/* --- –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞: –º–∞–∫—Å–∏–º—É–º N —Å–ª–æ–≤ --- */
function limitWords(s, n = 10) {
  const words = String(s || "").trim().split(/\s+/);
  if (words.length <= n) return words.join(" ");
  return words.slice(0, n).join(" ");
}

/* ===== CSV & matching –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤ ===== */
function csvToList(csv) {
  return String(csv || "")
    .split(",")
    .map(s => s.trim())
    .filter(s => s.length > 0);
}
function tokenize(s) {
  return String(s || "")
    .toLowerCase()
    .replace(/—ë/g, "–µ")
    .split(/[^\p{L}\p{N}\+]+/u)
    .filter(w => w.length >= 2);
}
function buildKeywords(csv) {
  const items = csvToList(csv);
  const bag = new Set();
  for (const it of items) {
    const toks = tokenize(it);
    for (const t of toks) {
      bag.add(t);
      if (t === "—Å–ø–±") {
        ["—Å–ø–±","–ø–∏—Ç–µ—Ä","—Å–∞–Ω–∫—Ç","–ø–µ—Ç–µ—Ä–±—É—Ä–≥","—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥","—Å–∞–Ω–∫—Ç–ø–µ—Ç–µ—Ä–±—É—Ä–≥"].forEach(x=>bag.add(x));
      }
      if (t === "—Ç–∞—Ä–∫–æ–≤") {
        ["—Ç–∞—Ä–∫–æ–≤","tarkov","escape","—ç—Å–∫–µ–π–ø","—ç—Å–∫–µ–π–ø—Ñ—Ä–æ–º—Ç–∞—Ä–∫–æ–≤","—ç—Å–∫–µ–π–ø-—Ñ—Ä–æ–º-—Ç–∞—Ä–∫–æ–≤"].forEach(x=>bag.add(x));
      }
      if (t === "–∏–º—è") { ["–∏–º—è","–∑–æ–≤—É—Ç"].forEach(x=>bag.add(x)); }
      if (t === "–ª–µ—Ç" || t === "–≤–æ–∑—Ä–∞—Å—Ç") { ["–ª–µ—Ç","–≤–æ–∑—Ä–∞—Å—Ç"].forEach(x=>bag.add(x)); }
      if (t === "–∏–≥—Ä–∞" || t === "–∏–≥—Ä–∞—é" || t === "–∏–≥—Ä—É") {
        ["–∏–≥—Ä–∞","–∏–≥—Ä—É","–∏–≥—Ä–∞–µ—à—å","–≤–æ —á—Ç–æ","—á—Ç–æ –∏–≥—Ä–∞—é"].forEach(x=>bag.add(x));
      }
      if (t === "–∫–æ–Ω—Ç–µ–Ω—Ç") { ["–∫–æ–Ω—Ç–µ–Ω—Ç","18","18+"].forEach(x=>bag.add(x)); }
    }
  }
  return Array.from(bag);
}
function messageMatchesPrompt(message, csv) {
  if (!csv) return false;
  const txt = tokenize(message).join(" ");
  const kws = buildKeywords(csv);
  return kws.some(kw => txt.includes(kw));
}
const HINTS = [
  { re: /(–∫–∞–∫.*–∑–æ–≤—É—Ç|–∑–æ–≤—É—Ç|–∏–º—è)/i, needs: ["–∏–º—è","–∑–æ–≤—É—Ç"] },
  { re: /(—Å–∫–æ–ª—å–∫–æ.*–ª–µ—Ç|–≤–æ–∑—Ä–∞—Å—Ç)/i, needs: ["–ª–µ—Ç","–≤–æ–∑—Ä–∞—Å—Ç"] },
  { re: /(–æ—Ç–∫—É–¥–∞|–≥–æ—Ä–æ–¥|–≥–¥–µ.*–∂–∏–≤)/i,  needs: ["—Å–ø–±","–ø–∏—Ç–µ—Ä","—Å–∞–Ω–∫—Ç","–ø–µ—Ç–µ—Ä–±—É—Ä–≥","–≥–æ—Ä–æ–¥"] },
  { re: /(–≤–æ —á—Ç–æ.*–∏–≥—Ä–∞|–∫–∞–∫—É—é.*–∏–≥—Ä—É|–∏–≥—Ä–∞–µ—à—å)/i, needs: ["–∏–≥—Ä–∞","–∏–≥—Ä—É","–∏–≥—Ä–∞–µ—à—å","tarkov","—Ç–∞—Ä–∫–æ–≤","escape"] },
  { re: /(–∫–æ–Ω—Ç–µ–Ω—Ç|18\+)/i, needs: ["–∫–æ–Ω—Ç–µ–Ω—Ç","18","18+"] },
];
function messageImpliedByPrompt(message, csv) {
  if (!csv) return false;
  const txt = String(message || "").toLowerCase().replace(/—ë/g, "–µ");
  const kws = new Set(buildKeywords(csv));
  for (const { re, needs } of HINTS) {
    if (re.test(txt) && needs.some(n => kws.has(n))) return true;
  }
  return false;
}

/* ==================== VK creds ==================== */
const {
  VKVL_CLIENT_ID,
  VKVL_ACCESS_TOKEN,
  VKVL_REFRESH_TOKEN,
  VKVL_EXPIRES_AT,
} = process.env;

async function loadCredentials() {
  await assertDb();
  await ensureSchema();

  if (VKVL_CLIENT_ID && VKVL_ACCESS_TOKEN && VKVL_REFRESH_TOKEN && VKVL_EXPIRES_AT) {
    const existing = await getVkvlToken(VKVL_CLIENT_ID);
    if (!existing) {
      await upsertVkvlToken({
        accessToken: VKVL_ACCESS_TOKEN,
        refreshToken: VKVL_REFRESH_TOKEN,
        expiresAt: Number(VKVL_EXPIRES_AT),
        clientId: VKVL_CLIENT_ID,
      });
      console.log("üíæ –°–∏–¥ –∑–∞–ø–∏—Å–∞–Ω –≤ vkvl_token –∏–∑ .env");
    }
  }

  const clientId = VKVL_CLIENT_ID || "79ed8672-f1cb-42c6-8226-8bacea67d044";
  const creds = await getVkvlToken(clientId);
  if (!creds) throw new Error("–ù–µ—Ç –∫—Ä–µ–¥–æ–≤ VKVL. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ vkvl_token –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ VKVL_* –≤ .env.");
  return creds;
}

/* ===== –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª ===== */
async function ensureFollow(user, accessToken) {
  const url = `https://api.live.vkplay.ru/v1/blog/${user}/follow`;
  try {
    const resp = await axios.post(url, {}, {
      headers: {
        authorization: `Bearer ${accessToken}`,
        origin: "https://live.vkvideo.ru",
        referer: `https://live.vkvideo.ru/${user}`,
        "content-type": "application/json",
      },
      timeout: 10000,
      validateStatus: () => true,
    });

    if (resp.data?.status === true) {
      console.log(`‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ VKVL: ${user}`);
      return { ok: true, already: false };
    }
    if (resp.data?.error === "already_subscribed") {
      console.log(`‚ÑπÔ∏è –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ ${user}`);
      return { ok: true, already: true };
    }
    console.warn(`‚ö†Ô∏è follow(${user}) API response:`, resp.status, resp.data);
    return { ok: false, reason: resp.data?.error || `http_${resp.status}`, details: resp.data };
  } catch (e) {
    console.error(`‚ùå follow(${user}) network error:`, e?.response?.status, e?.response?.data || e?.message);
    return { ok: false, reason: "network_error" };
  }
}

/* ==================== —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ ==================== */
async function getModesForChannel(channel) {
  try { return await getAiModeForVkvlPage(channel); }
  catch { return { ai_all: 1, ai_random: 0, ai_mention: 0 }; }
}
function shouldReplyByMode(text, mode) {
  const ai_all     = Number(mode?.ai_all ?? 0);
  const ai_random  = Number(mode?.ai_random ?? 0);
  const ai_mention = Number(mode?.ai_mention ?? 0);
  if (ai_all === 1) return true;
  if (ai_mention === 1 && isMentioned(text)) return true;
  if (ai_random === 1 && Math.random() < 0.30) return true;
  return false;
}

/* ===== –ò—Å—Ç–æ—Ä–∏—è –≤ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç ===== */
function renderHistory(lines, maxChars = 1200) {
  const out = [];
  for (const r of lines) {
    const who = r.role === "assistant" ? "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç" : (r.username || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å");
    const text = String(r.message || "").replace(/\s+/g, " ").trim().slice(0, 180);
    if (text) out.push(`${who}: ${text}`);
  }
  let s = out.join("\n");
  if (s.length > maxChars) s = s.slice(-maxChars);
  return s;
}

/* ==================== –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–∞–Ω–∞–ª–æ–≤ ==================== */
const clients = new Map(); // channel -> { client }

async function attachHandlers(channel, client, creds) {
  clients.set(channel, { client });

  // –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç)
  try {
    const res = await ensureFollow(channel, creds.accessToken);
    const msg = res.ok
      ? (res.already
          ? "‚ÑπÔ∏è –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª. –ë–æ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ —á–∞—Ç—É."
          : "‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∏ –æ—Ñ–æ—Ä–º–∏–ª –ø–æ–¥–ø–∏—Å–∫—É. –î–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")
      : "‚ö†Ô∏è –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —á–∞—Ç—É. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ (–Ω—É–∂–Ω—ã –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã).";
    try { await client.sendMessage(msg, channel); } catch {}
  } catch {}

  client.on("message", async (ctx) => {
    const platform = "vkvl";
    const username = ctx.user?.nick || ctx.user?.login || "unknown";
    const text     = (ctx.message?.text ?? "").trim();

    if (ctx.user?.isMe || ["Kappa_GPT", "–ù–µ–π—Ä–æ–ë–æ—Ç"].includes(username)) return;
    if (!text) return;
    if (isEmojiOnly(text)) return;

    const mode = await getModesForChannel(channel);
    if (!shouldReplyByMode(text, mode)) return;

    const { prompt, negative_prompt } = await getPromptsForVkvlPage(channel);

    // –Ω–µ–≥–∞—Ç–∏–≤ ‚Äî –∫–æ—Ä–æ—Ç–∫–æ–µ –æ—Å—É–∂–¥–µ–Ω–∏–µ (–∏ –ø–∏—à–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é)
    if (negative_prompt && messageMatchesPrompt(text, negative_prompt)) {
      const { userId } = getSafeIds(ctx);
      await appendHistory({ platform, channel: channel.toLowerCase(), role: "user", user_id: userId, username, message: text });

      const short = limitWords("—Ç–∞–∫–∏–µ —Ç–µ–º—ã –∑–¥–µ—Å—å –Ω–µ –æ–±—Å—É–∂–¥–∞–µ–º. –î–∞–≤–∞–π—Ç–µ –±–µ–∑ —ç—Ç–æ–≥–æ.", 10);
      const finalReply = addressUser(short, username);

      try { await client.sendMessage(finalReply, channel); } catch {}
      await appendHistory({ platform, channel: channel.toLowerCase(), role: "assistant", user_id: null, username: "–ù–µ–π—Ä–æ–ë–æ—Ç", message: finalReply });

      try {
        const { msgId } = getSafeIds(ctx);
        await logChatMessage({ user_id: userId, platform, channel, msg_id: msgId, username, message: text, response: finalReply });
      } catch {}

      return;
    }

    // --- –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞–º—è—Ç–∏ ---
    const { userId } = getSafeIds(ctx);
    await appendHistory({ platform, channel: channel.toLowerCase(), role: "user", user_id: userId, username, message: text });

    const history = await getRecentHistory({ platform, channel, limit: 20 });
    const historySnippet = renderHistory(history);

    const useContext =
      (prompt && messageMatchesPrompt(text, prompt)) ||
      (prompt && messageImpliedByPrompt(text, prompt));

    // –í–ê–ñ–ù–û: —Å–Ω–∞—á–∞–ª–∞ –∏—Å—Ç–æ—Ä–∏—è, –∑–∞—Ç–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç—ã
    const baseSystem = [
      "–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–¥–∞–≤–Ω–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ (—Å–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ä—ã–µ, –ø–æ—Ç–æ–º –Ω–æ–≤—ã–µ):",
      historySnippet || "(–ø—É—Å—Ç–æ)",
      "",
      "–û—Ç–≤–µ—á–∞–π –ö–†–ê–¢–ö–û, –ø–æ-—Ä—É—Å—Å–∫–∏, –º–∞–∫—Å–∏–º—É–º 10 —Å–ª–æ–≤.",
      "–ù–µ –Ω–∞—á–∏–Ω–∞–π —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π. –ù–µ –æ–±—Ä–∞—â–∞–π—Å—è –ø–æ –∏–º–µ–Ω–∏ ‚Äî –∏–º—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ.",
      "–ë–µ–∑ –ª–∏—à–Ω–∏—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏ —ç–º–æ–¥–∑–∏.",
      "–ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∫–∞–Ω–∞–ª–∞ –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–µ —Ñ–∞–∫—Ç—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö —Å—Ç—Ä–æ–≥–æ –∏ –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π. –ï—Å–ª–∏ —Ñ–∞–∫—Ç–∞ –Ω–µ—Ç, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏, —á—Ç–æ –Ω–µ –∑–Ω–∞–µ—à—å –∏–ª–∏ —É—Ç–æ—á–Ω–∏ –≤–æ–ø—Ä–æ—Å."
    ];
    if (useContext) {
      baseSystem.push("");
      baseSystem.push("–§–∞–∫—Ç—ã –æ –∫–∞–Ω–∞–ª–µ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –≤–µ—Ä—å –∏–º –∏ –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π):");
      baseSystem.push(String(prompt));
    }
    const systemForMsg = baseSystem.join("\n");

    let ai;
    try {
      ai = await generateAIResponse({
        provider: "llama-4",
        prompt: text,
        meta: { platform, channel, username },
        system: systemForMsg,
        options: { temperature: 0.25, max_tokens: 80 },
      });
      if (!ai) return;
    } catch (e) {
      console.error("‚ùå AI error:", e?.response?.data || e?.message || e);
      return;
    }

    const trimmed = stripGreetings(ai);
    const short   = limitWords(trimmed, 10);
    const finalReply = addressUser(short, username);

    try { await client.sendMessage(finalReply, channel); } catch (e) {
      console.error("‚ùå sendMessage error:", e?.response?.data || e?.message || e);
      return;
    }

    await appendHistory({ platform, channel: channel.toLowerCase(), role: "assistant", user_id: null, username: "–ù–µ–π—Ä–æ–ë–æ—Ç", message: finalReply });

    const { msgId } = getSafeIds(ctx);
    try {
      await logChatMessage({
        user_id: userId,
        platform,
        channel,
        msg_id: msgId,
        username,
        message: text,
        response: finalReply,
      });
    } catch (e) {
      console.error("‚ö†Ô∏è DB log error:", e?.message || e);
    }
  });
}

async function createClientForChannel(channel, creds) {
  const client = new VKPLMessageClient({
    auth: {
      accessToken: creds.accessToken,
      refreshToken: creds.refreshToken,
      expiresAt: creds.expiresAt,
    },
    clientId: creds.clientId,
    channels: [channel],
    log: false,
    debugLog: false,
  });
  await client.connect();
  await attachHandlers(channel, client, creds);
  console.log(`üü¢ –ü–æ–¥–∫–ª—é—á—ë–Ω –∫ –∫–∞–Ω–∞–ª—É: ${channel}`);
}

async function removeClient(channel) {
  const entry = clients.get(channel);
  if (!entry) return;
  try {
    if (typeof entry.client.disconnect === "function") {
      await entry.client.disconnect();
    } else if (entry.client.ws && typeof entry.client.ws.close === "function") {
      entry.client.ws.close();
    }
  } catch {}
  clients.delete(channel);
  console.log(`üî¥ –û—Ç–∫–ª—é—á—ë–Ω –æ—Ç –∫–∞–Ω–∞–ª–∞: ${channel}`);
}

async function reconcileTargets(creds) {
  let desired = [];
  try { desired = await getAllVkvlPages(); } catch {}
  desired = Array.from(new Set((desired || []).map(s => String(s).toLowerCase())));

  const current = Array.from(clients.keys());

  for (const ch of desired) {
    if (!clients.has(ch)) {
      try { await createClientForChannel(ch, creds); } catch (e) {
        console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ${ch}:`, e?.message || e);
      }
    }
  }
  for (const ch of current) {
    if (!desired.includes(ch)) {
      await removeClient(ch);
    }
  }
}

/* ==================== main ==================== */
async function main() {
  console.log("üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK Play Live‚Ä¶");
  await assertDb();
  await ensureSchema();
  const creds = await loadCredentials();
  await reconcileTargets(creds);
  setInterval(() => { reconcileTargets(creds).catch(()=>{}); }, 10_000);
}

main().catch((e) => {
  console.error("‚ùå VKVL init error:", e.message);
  process.exit(1);
});
